#!/bin/bash

## This is the config file containing all the setup vars for dependent scripts



## TODO: 
## -- code difference between OV and EV if there is one
## 


clear

# Source dependent certificate functions
. ./certificate_functions.sh

SCRIPT_PATH=`pwd`
#start_dump_script_vars
# If you want to start over and generate a new CSR change to Y (Yes)
CLOBBER_KEYSTORE="N"

CLUSTER_NAME="PCA01017-TokenService"

CH_PHRASE="TokenServiceClusterTest1!"
 
# Common name used for the certificate 
CN_HOST="pca00372.inf.fedex.com"

# Group email address used in the certificate request
GROUP_EMAIL_ADDRESS="dba-dom@corp.ds.fedex.com"

CERT_OU="Services IT - $CLUSTER_NAME"

# TODO : Handle SANs 
DNAME="CN=$CN_HOST, EMAILADDRESS=$GROUP_EMAIL_ADDRESS, OU=\"$CERT_OU\", O=FedEx, L=Collierville, ST=Tennessee, C=US"


# CERT_PRODUCT is not used currently
#CERT_PRODUCT="OV"
#CERT_PRODUCT="EV"

# This should always be jks, we automatically export the jks keystore to p12 
# after the certificate is issued and imported
KEYSTORE_TYPE="jks" 

# These are our scripts input, output and work directories
# This directory must exist and contin the CA Bundle files from above 
INFILES=./infiles
# These two directories are created if they don't exist
WORK=./work
COMPLETE=./complete 

## TESTING:  Creating non existing works
if [[ ! -d $WORK ]]; then 
    echo "Creating $WORK directory..."
    mkdir -p $WORK
fi
if [[ ! -d $COMPLETE ]]; then 
    echo "Creating $COMPLETE directory..."
    mkdir -p $COMPLETE
fi

# Get the DigiCert-CAChains.jks files below from Keyword->DigiCert->Documents
# currently using DigiCert CA SHA2 to SHA2.zip
# Place the CA Chain files in the INFILES directory
# Note: Secure Site OV and Secure Site EV may have different intermediate CA certs
# 

DIGICERT_CA_CHAIN_BUNDLE=$INFILES/DigiCert-CAChains.$KEYSTORE_TYPE
DIGICERT_DEFAULT_KEYSTORE_CA_BUNDLE_PASSWORD="changeme"

KEY_PATH=$COMPLETE/$CLUSTER_NAME

KS_PASSWD=TTrrSS18

 

KEYSTORE=$KEY_PATH/node-${CLUSTER_NAME}.$KEYSTORE_TYPE
TRUSTSTORE=$KEY_PATH/truststore-cassandra-symantec.jks
PRIVATE_KEYSTORE=private-${CLUSTER_NAME}.$KEYSTORE_TYPE
PRIVATE_KEYFILE=private-${CLUSTER_NAME}.key
KEY_ALIAS_NAME=cassandra-${CLUSTER_NAME}

# This function sets CERT from CH_HOST by looking for host name 
# and sets CERT_TYPE from the file format issued by the CA
# override with CERT=$CN_HOST.$CERT_TYPE after call and comment out call
# See certificate_functions.sh for details
set_cert_name
#CERT_TYPE=crt
#CERT=$CN_HOST

 
#DIGICERT_CA_INTERMEDIATE=DigiCertCA2.pem
#DIGICERT_CA_ROOT=TrustedRoot.pem
#SYMANTEC_CERTS=concatenated-Verisign-IntermediateRootBundle.cer

 

#yes = private key generated by openssl, private key is in a pem file
#no = private key generated by keytool and resulting private key is in a JKS
#OPEN_SSL_GEN_PRIVATE_KEY=NO

#end_dump_script_vars
